@model Registration
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> _userManager

@{
    ViewData["Title"] = "Регистрация на мероприятие";
    var eventItem = ViewBag.Event as Event;
}

<style>
    :root {
        --primary-gradient: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
        --card-gradient: linear-gradient(to bottom right, #ffffff, #f8f9fa);
        --shadow: 0 8px 30px rgba(0,0,0,0.12);
        --shadow-hover: 0 12px 40px rgba(0,0,0,0.15);
    }

    .registration-section {
        min-height: 100vh;
        display: flex;
        align-items: center;
        padding: 3rem 0;
        background-color: #f8fafc;
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><rect fill="none" stroke="%23e2e8f0" stroke-width="0.5" x="0" y="0" width="100" height="100"/></svg>');
    }

    .registration-card {
        background: var(--card-gradient);
        border-radius: 20px;
        overflow: hidden;
        box-shadow: var(--shadow);
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    }

        .registration-card:hover {
            box-shadow: var(--shadow-hover);
        }

    .registration-header {
        background: var(--primary-gradient);
        padding: 2.5rem 2rem;
        text-align: center;
        color: white;
        position: relative;
        overflow: hidden;
    }

        .registration-header::before {
            content: "";
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.15) 0%, rgba(255,255,255,0) 70%);
            transform: rotate(30deg);
        }

    .registration-body {
        padding: 3rem;
    }

    .event-card {
        background: #f8fafc;
        border-radius: 16px;
        padding: 1.8rem;
        margin-bottom: 2.5rem;
        box-shadow: 0 4px 15px rgba(0,0,0,0.05);
        border-left: 4px solid #6a11cb;
    }

    .event-title {
        font-weight: 700;
        margin-bottom: 1.5rem;
        color: #1e293b;
    }

    .event-details {
        display: flex;
        flex-wrap: wrap;
        gap: 1.5rem;
    }

    .detail-item {
        display: flex;
        align-items: center;
    }

    .detail-icon {
        font-size: 1.4rem;
        color: #6a11cb;
        margin-right: 10px;
    }

    .form-check {
        display: flex;
        align-items: center;
        margin-top: 1.5rem;
        margin-bottom: 1.5rem;
    }

    .form-check-input {
        width: 1.3rem;
        height: 1.3rem;
        border-radius: 6px;
        border: 2px solid #cbd5e1;
        margin-right: 12px;
        box-shadow: none;
    }

        .form-check-input:checked {
            background-color: #6a11cb;
            border-color: #6a11cb;
        }

        .form-check-input:focus {
            box-shadow: 0 0 0 0.25rem rgba(106, 17, 203, 0.25);
        }

    .form-check-label {
        color: #475569;
        font-weight: 500;
    }

    .alert-danger {
        border-radius: 12px;
        padding: 1.2rem;
        background: rgba(255, 75, 43, 0.08);
        border: 1px solid rgba(255, 75, 43, 0.2);
        color: #ff4b2b;
    }

    .btn-register {
        background: var(--primary-gradient);
        border: none;
        color: white;
        padding: 1rem 2.5rem;
        border-radius: 50px;
        font-weight: 600;
        font-size: 1.1rem;
        box-shadow: var(--shadow);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        display: block;
        width: 100%;
        margin-top: 1.5rem;
    }

        .btn-register:hover {
            transform: translateY(-3px);
            box-shadow: var(--shadow-hover);
        }

        .btn-register::after {
            content: "";
            position: absolute;
            top: -50%;
            left: -60%;
            width: 20px;
            height: 200%;
            background: rgba(255,255,255,0.3);
            transform: rotate(25deg);
            transition: all 0.7s;
        }

        .btn-register:hover::after {
            left: 120%;
        }

    .animate-register {
        opacity: 0;
        transform: translateY(30px);
        transition: opacity 0.8s ease-out, transform 0.8s ease-out;
    }

        .animate-register.visible {
            opacity: 1;
            transform: translateY(0);
        }

    .delay-1 {
        transition-delay: 0.1s;
    }

    .delay-2 {
        transition-delay: 0.2s;
    }

    .delay-3 {
        transition-delay: 0.3s;
    }
</style>

<div class="registration-section">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="registration-card animate-register">
                    <div class="registration-header">
                        <h2 class="mb-0">@ViewData["Title"]</h2>
                    </div>

                    <div class="registration-body">
                        <div class="event-card animate-register delay-1">
                            <h4 class="event-title">@eventItem.Title</h4>
                            <div class="event-details">
                                <div class="detail-item">
                                    <div class="detail-icon">
                                        <i class="bi bi-calendar"></i>
                                    </div>
                                    <div>
                                        <strong>Дата:</strong> @eventItem.Date.ToString("d MMMM yyyy")
                                    </div>
                                </div>

                                <div class="detail-item">
                                    <div class="detail-icon">
                                        <i class="bi bi-clock"></i>
                                    </div>
                                    <div>
                                        <strong>Время:</strong> @eventItem.Time.ToString(@"hh\:mm")
                                    </div>
                                </div>

                                <div class="detail-item">
                                    <div class="detail-icon">
                                        <i class="bi bi-geo-alt"></i>
                                    </div>
                                    <div>
                                        <strong>Место:</strong> @eventItem.Location
                                    </div>
                                </div>
                            </div>
                        </div>

                        <form asp-action="Register" method="post" class="animate-register delay-2">
                            @Html.AntiForgeryToken()
                            <input type="hidden" asp-for="EventId" />

                            <!-- Скрытое поле для UserId -->
                            <input type="hidden" asp-for="UserId"
                                   value="@(await _userManager.GetUserIdAsync(await _userManager.GetUserAsync(User)))" />

                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" required
                                       id="agreeTerms" name="agreeTerms">
                                <label class="form-check-label" for="agreeTerms">
                                    Я согласен с правилами участия в мероприятии
                                </label>
                            </div>

                            @if (!ViewData.ModelState.IsValid)
                            {
                                <div class="alert alert-danger mb-4 animate-register delay-2">
                                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                                    {
                                        <p class="mb-1"><i class="bi bi-exclamation-circle me-2"></i>@error.ErrorMessage</p>
                                    }
                                </div>
                            }

                            <button type="submit" class="btn-register animate-register delay-3">
                                <i class="bi bi-check-circle me-2"></i> Подтвердить регистрацию
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Анимация появления элементов при скролле
    document.addEventListener('DOMContentLoaded', function() {
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('visible');
                }
            });
        }, { threshold: 0.1 });

        document.querySelectorAll('.animate-register').forEach(el => {
            observer.observe(el);
        });
    });
</script>