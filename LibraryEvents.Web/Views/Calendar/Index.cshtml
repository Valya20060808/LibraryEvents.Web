@{
    ViewData["Title"] = "Календарь мероприятий";
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <h2 class="text-center mb-4 animate-on-scroll">Календарь мероприятий</h2>

            <div class="card mb-4 animate-on-scroll border-0 shadow-lg">
                <div class="card-body p-4">
                   
                    <div class="d-flex flex-wrap justify-content-center gap-3 mb-4">
                        @foreach (var genre in ViewBag.Genres)
                        {
                            <div class="filter-chip" data-genre-id="@genre.Id">
                                <input type="checkbox" class="filter-check" id="genre-@genre.Id" checked>
                                <label for="genre-@genre.Id" class="filter-label" style="--genre-color: @genre.Color;">
                                    <span class="filter-color"></span>
                                    <span class="filter-name">@genre.Name</span>
                                    <span class="filter-count">0</span>
                                </label>
                            </div>
                        }
                    </div>

                 
                    <div id="calendar-container">
                        <div id="calendar" class="animate-on-scroll"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css">
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
            --card-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        #calendar-container {
            background: white;
            border-radius: 16px;
            overflow: hidden;
            box-shadow: var(--card-shadow);
        }

        #calendar {
            min-height: 600px;
            padding: 20px;
        }

  
        .filter-chip {
            position: relative;
            margin: 5px;
        }

        .filter-check {
            display: none;
        }

        .filter-label {
            display: flex;
            align-items: center;
            padding: 8px 15px;
            border-radius: 30px;
            background: #f8f9fa;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            border: 1px solid #e2e8f0;
        }

        .filter-check:checked + .filter-label {
            background: #f0f5ff;
            box-shadow: 0 4px 8px rgba(106, 17, 203, 0.2);
            border-color: rgba(106, 17, 203, 0.3);
        }

        .filter-color {
            display: inline-block;
            width: 16px;
            height: 16px;
            border-radius: 50%;
            background-color: var(--genre-color);
            margin-right: 8px;
        }

        .filter-name {
            font-weight: 500;
            margin-right: 8px;
        }

        .filter-count {
            background: #e2e8f0;
            border-radius: 12px;
            padding: 2px 8px;
            font-size: 0.8rem;
            font-weight: 600;
        }

       
        .fc .fc-toolbar {
            background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
            color: white;
            padding: 15px 20px;
            margin: 0;
            border-radius: 0;
        }

        .fc .fc-toolbar-title {
            font-weight: 700;
            font-size: 1.4rem;
            color: white;
        }

        .fc .fc-button {
            background: rgba(255,255,255,0.9) !important;
            color: #6a11cb !important;
            border: none !important;
            border-radius: 30px !important;
            padding: 8px 16px !important;
            font-weight: 600 !important;
            transition: all 0.3s ease;
            font-size: 0.9rem;
            height: auto;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

            .fc .fc-button:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 10px rgba(0,0,0,0.15);
            }

            .fc .fc-button:active, .fc .fc-button:focus {
                box-shadow: 0 2px 5px rgba(0,0,0,0.2) !important;
                transform: translateY(0) !important;
            }

        .fc .fc-col-header-cell {
            background: #f8fafc;
            padding: 10px 0;
        }

        .fc .fc-col-header-cell-cushion {
            color: #495057;
            font-weight: 600;
            text-decoration: none;
        }

        .fc .fc-daygrid-day {
            padding: 4px;
            border: 1px solid #f0f2f5;
        }

        .fc .fc-daygrid-day-number {
            color: #495057;
            font-weight: 500;
            font-size: 0.9rem;
            padding: 5px;
        }

        .fc .fc-day-today {
            background-color: rgba(106, 17, 203, 0.05) !important;
        }

            .fc .fc-day-today .fc-daygrid-day-number {
                background: #6a11cb;
                color: white !important;
                border-radius: 50%;
                width: 28px;
                height: 28px;
                display: flex;
                align-items: center;
                justify-content: center;
            }

    
        .fc-event {
            border: none !important;
            border-radius: 8px !important;
            padding: 5px 8px !important;
            margin: 2px 0 !important;
            font-size: 0.8rem !important;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .fc-event-main {
            display: flex;
            align-items: center;
            overflow: hidden;
        }

        .fc-event-icon {
            margin-right: 5px;
            font-size: 0.9rem;
            flex-shrink: 0;
        }

        .fc-event-title {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            flex-grow: 1;
            font-weight: 500;
        }

        .fc-daygrid-event-dot {
            display: none !important;
        }

        .fc-daygrid-day-more {
            font-size: 0.75rem;
            padding: 2px 6px;
            border-radius: 4px;
            background-color: rgba(106, 17, 203, 0.1);
            color: #6a11cb;
            font-weight: 500;
            margin-top: 3px;
        }

        .fc-daygrid-day-frame {
            min-height: 90px;
        }

        .animate-on-scroll {
            opacity: 0;
            transform: translateY(20px);
            transition: opacity 0.6s ease-out, transform 0.6s ease-out;
        }

            .animate-on-scroll.visible {
                opacity: 1;
                transform: translateY(0);
            }
    </style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/locales/ru.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
           
            let allEvents = [];

         
            const calendarEl = document.getElementById('calendar');
            const calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                locale: 'ru',
                firstDay: 1,
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,listWeek'
                },
                events: {
                    url: '@Url.Action("GetEvents", "Calendar")',
                    method: 'GET',
                    extraParams: {},
                    success: function(response) {
                        allEvents = response;
                        updateFilterCounts();
                    },
                    failure: function() {
                        console.error('Failed to load events');
                    }
                },
                eventClick: function(info) {
                    info.jsEvent.preventDefault();
                    window.location.href = info.event.url;
                },
                eventDisplay: 'block',
                eventContent: function(arg) {
                    return {
                        html: `<div class="fc-event-main">
                                   <i class="bi bi-bookmark fc-event-icon"></i>
                                   <span class="fc-event-title">${arg.event.title}</span>
                               </div>`
                    };
                },
                eventDidMount: function(info) {
                    
                    if (info.event.extendedProps.color) {
                        info.el.style.backgroundColor = info.event.extendedProps.color;
                    }

                   
                    if (typeof bootstrap !== 'undefined') {
                        new bootstrap.Tooltip(info.el, {
                            title: `
                                <div class="event-tooltip">
                                    <div class="event-title">${info.event.title}</div>
                                    <div class="event-time">
                                        <i class="bi bi-clock"></i>
                                        ${info.event.start ? new Date(info.event.start).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) : ''}
                                    </div>
                                    ${info.event.extendedProps.location ? `
                                    <div class="event-location">
                                        <i class="bi bi-geo-alt"></i> ${info.event.extendedProps.location}
                                    </div>` : ''}
                                    ${info.event.extendedProps.speaker ? `
                                    <div class="event-speaker">
                                        <i class="bi bi-person"></i> ${info.event.extendedProps.speaker}
                                    </div>` : ''}
                                </div>
                            `,
                            html: true,
                            placement: 'top',
                            container: 'body'
                        });
                    }
                },
                dayMaxEventRows: 3,
                dayMaxEvents: 4,
                moreLinkContent: function(args) {
                    return {
                        html: `<div class="fc-daygrid-day-more">+${args.num} ещё</div>`
                    };
                }
            });

            calendar.render();
            calendar.updateSize();

       
            function updateFilterCounts() {
                document.querySelectorAll('.filter-chip').forEach(chip => {
                    const genreId = parseInt(chip.dataset.genreId);
                    const count = allEvents.filter(e =>
                        e.extendedProps.genreId === genreId).length;

                    chip.querySelector('.filter-count').textContent = count;
                });
            }

            
            document.querySelectorAll('.filter-check').forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    const genreId = parseInt(this.closest('.filter-chip').dataset.genreId);
                    const isChecked = this.checked;

                    calendar.getEvents().forEach(event => {
                        if (event.extendedProps.genreId === genreId) {
                            event.setProp('display', isChecked ? 'auto' : 'none');
                        }
                    });
                });
            });

     
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('visible');
                    }
                });
            }, { threshold: 0.1 });

            document.querySelectorAll('.animate-on-scroll').forEach(el => {
                observer.observe(el);
            });
        });
    </script>
}