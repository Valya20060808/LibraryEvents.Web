@model LibraryEvents.Web.Models.Event
@using Microsoft.AspNetCore.Mvc.Rendering

@{
    ViewData["Title"] = "Редактировать событие";

    // Получаем названия жанра и спикера, даже если навигационные свойства не загружены
    var genreName = Model.Genre?.Name ?? (ViewData["Genres"] as SelectList)?
        .FirstOrDefault(g => g.Value == Model.GenreId.ToString())?.Text;

    var speakerName = Model.Speaker?.Name ?? (ViewData["Speakers"] as SelectList)?
        .FirstOrDefault(s => s.Value == Model.SpeakerId.ToString())?.Text;
}

<style>
    /* Стили остаются без изменений */
    .edit-header {
        background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
        padding: 3rem 0;
        margin-bottom: 3rem;
        border-radius: 0 0 30px 30px;
        position: relative;
        overflow: hidden;
    }

        .edit-header::before {
            content: "";
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 70%);
            transform: rotate(30deg);
        }

    .edit-title {
        font-size: 2.5rem;
        font-weight: 800;
        color: white;
        text-shadow: 0 2px 10px rgba(0,0,0,0.15);
    }

    .form-container {
        background: linear-gradient(to bottom right, #ffffff, #f8f9fa);
        border-radius: 16px;
        padding: 2.5rem;
        box-shadow: 0 8px 30px rgba(0,0,0,0.12);
        margin-bottom: 3rem;
        position: relative;
        overflow: hidden;
    }

    .form-label {
        font-weight: 600;
        color: #495057;
        margin-bottom: 0.5rem;
    }

    .form-control, .form-select {
        border: 1px solid #ced4da;
        border-radius: 12px;
        padding: 0.8rem 1.2rem;
        font-size: 1rem;
        transition: all 0.3s;
    }

        .form-control:focus, .form-select:focus {
            border-color: #6a11cb;
            box-shadow: 0 0 0 0.25rem rgba(106, 17, 203, 0.15);
        }

    .btn-primary {
        background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
        border: none;
        border-radius: 50px;
        padding: 0.8rem 2rem;
        font-weight: 600;
        transition: all 0.3s;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.15);
        }

    .btn-secondary {
        border-radius: 50px;
        padding: 0.8rem 2rem;
        font-weight: 600;
        transition: all 0.3s;
    }

        .btn-secondary:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

    .text-danger {
        font-weight: 500;
        margin-top: 0.4rem;
        display: block;
        opacity: 0;
        max-height: 0;
        overflow: hidden;
        transition: all 0.3s ease;
    }

    .has-error .text-danger {
        opacity: 1;
        max-height: 2rem;
    }

    .validation-summary {
        background-color: #fff5f5;
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 2rem;
        border-left: 4px solid #ff6b6b;
        max-height: 0;
        opacity: 0;
        overflow: hidden;
        transition: all 0.5s ease;
    }

    .has-validation-errors .validation-summary {
        max-height: 500px;
        opacity: 1;
    }

    .validation-summary ul {
        margin-bottom: 0;
        padding-left: 1.5rem;
    }

    .animate-on-scroll {
        opacity: 0;
        transform: translateY(30px);
        transition: opacity 0.6s ease-out, transform 0.6s ease-out;
    }

        .animate-on-scroll.visible {
            opacity: 1;
            transform: translateY(0);
        }

    .form-icon {
        position: absolute;
        top: -20px;
        right: 20px;
        font-size: 5rem;
        opacity: 0.05;
        color: #6a11cb;
        z-index: 0;
    }

    .current-event {
        background-color: #f8f9fa;
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 2rem;
        border-left: 4px solid #6a11cb;
    }

    .current-event-title {
        font-weight: 700;
        color: #6a11cb;
        margin-bottom: 1rem;
    }

    .error-icon {
        position: absolute;
        right: 1.5rem;
        top: 50%;
        transform: translateY(-50%);
        color: #dc3545;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .has-error .error-icon {
        opacity: 1;
    }

    .form-group {
        position: relative;
        margin-bottom: 1.5rem;
    }

    .no-value {
        color: #6c757d;
        font-style: italic;
    }
</style>

<div class="edit-header text-center">
    <div class="container">
        <h1 class="edit-title animate-on-scroll">@ViewData["Title"]</h1>
    </div>
</div>

<div class="container">
    <div class="form-container animate-on-scroll @(ViewData.ModelState.ErrorCount > 0 ? "has-validation-errors" : "")">
        <i class="bi bi-pencil-square form-icon"></i>

        <div class="current-event">
            <h4 class="current-event-title">Текущее событие</h4>
            <div class="row">
                <div class="col-md-6">
                    <p><strong>Название:</strong> @Model.Title</p>
                    <p><strong>Дата:</strong> @Model.Date.ToString("dd MMMM yyyy")</p>
                    <p><strong>Время:</strong> @Model.Time.ToString(@"hh\:mm")</p>
                </div>
                <div class="col-md-6">
                    <!-- Исправленное отображение жанра и спикера -->
                    <p>
                        <strong>Жанр:</strong>
                        @if (!string.IsNullOrEmpty(genreName))
                        {
                            @genreName
                        }
                        else
                        {
                            <span class="no-value">не указан</span>
                        }
                    </p>
                    <p>
                        <strong>Спикер:</strong>
                        @if (!string.IsNullOrEmpty(speakerName))
                        {
                            @speakerName
                        }
                        else
                        {
                            <span class="no-value">не указан</span>
                        }
                    </p>
                    <p><strong>Место:</strong> @Model.Location</p>
                </div>
            </div>
        </div>

        <form asp-action="Edit" method="post" id="editForm">
            @Html.AntiForgeryToken()

            @if (ViewData.ModelState.ErrorCount > 0)
            {
                <div class="validation-summary">
                    <div asp-validation-summary="All"></div>
                </div>
            }

            <input type="hidden" asp-for="Id" />

            <div class="form-group">
                <label asp-for="Title" class="form-label">Название события</label>
                <input asp-for="Title" class="form-control" placeholder="Введите название события" />
                <span asp-validation-for="Title" class="text-danger"></span>
                <i class="bi bi-exclamation-circle error-icon"></i>
            </div>

            <div class="form-group">
                <label asp-for="Description" class="form-label">Описание</label>
                <textarea asp-for="Description" class="form-control" rows="4" placeholder="Опишите содержание события"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
                <i class="bi bi-exclamation-circle error-icon"></i>
            </div>

            <div class="row">
                <div class="col-md-6 form-group">
                    <label asp-for="Date" class="form-label">Дата проведения</label>
                    <input asp-for="Date" type="date" class="form-control" />
                    <span asp-validation-for="Date" class="text-danger"></span>
                    <i class="bi bi-exclamation-circle error-icon"></i>
                </div>

                <div class="col-md-6 form-group">
                    <label asp-for="Time" class="form-label">Время начала</label>
                    <input asp-for="Time" type="time" class="form-control" />
                    <span asp-validation-for="Time" class="text-danger"></span>
                    <i class="bi bi-exclamation-circle error-icon"></i>
                </div>
            </div>

            <div class="form-group">
                <label asp-for="Location" class="form-label">Место проведения</label>
                <input asp-for="Location" class="form-control" placeholder="Укажите место проведения" />
                <span asp-validation-for="Location" class="text-danger"></span>
                <i class="bi bi-exclamation-circle error-icon"></i>
            </div>

            <div class="row">
                <div class="col-md-6 form-group">
                    <label asp-for="GenreId" class="form-label">Жанр</label>
                    <select asp-for="GenreId" class="form-select" asp-items="@(ViewData["Genres"] as SelectList)">
                        <option value="">-- выберите жанр --</option>
                    </select>
                    <span asp-validation-for="GenreId" class="text-danger"></span>
                    <i class="bi bi-exclamation-circle error-icon"></i>
                </div>

                <div class="col-md-6 form-group">
                    <label asp-for="SpeakerId" class="form-label">Спикер</label>
                    <select asp-for="SpeakerId" class="form-select" asp-items="@(ViewData["Speakers"] as SelectList)">
                        <option value="">-- выберите спикера --</option>
                    </select>
                    <span asp-validation-for="SpeakerId" class="text-danger"></span>
                    <i class="bi bi-exclamation-circle error-icon"></i>
                </div>
            </div>

            <div class="d-flex justify-content-end pt-2">
                <a asp-action="Index" class="btn btn-secondary me-3">Отмена</a>
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-save me-2"></i>Сохранить изменения
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        // Анимация появления элементов при скролле
        document.addEventListener('DOMContentLoaded', function() {
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('visible');
                    }
                });
            }, { threshold: 0.1 });

            document.querySelectorAll('.animate-on-scroll').forEach(el => {
                observer.observe(el);
            });

            // Установка минимальной даты на сегодня
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('Date').setAttribute('min', today);

            // Динамическая обработка ошибок
            const form = document.getElementById('editForm');
            const inputs = form.querySelectorAll('input, select, textarea');

            // Добавляем обработчики для каждого поля
            inputs.forEach(input => {
                input.addEventListener('blur', function() {
                    validateField(this);
                });

                // Инициализируем состояние при загрузке
                validateField(input);
            });

            function validateField(field) {
                const formGroup = field.closest('.form-group');
                const errorSpan = formGroup.querySelector('.text-danger');
                const errorIcon = formGroup.querySelector('.error-icon');

                // Проверяем валидность поля
                if (!field.validity.valid || (errorSpan && errorSpan.textContent.trim() !== '')) {
                    formGroup.classList.add('has-error');
                } else {
                    formGroup.classList.remove('has-error');
                }
            }

            // Обработка отправки формы
            form.addEventListener('submit', function() {
                // Принудительно проверяем все поля перед отправкой
                inputs.forEach(input => {
                    validateField(input);
                });
            });
        });
    </script>
}